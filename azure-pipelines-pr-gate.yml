workspace:
  clean: all

pool:
  vmImage: windows-2022

steps:
- task: DeleteFiles@1
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: '**'

- checkout: self
  clean: true

# Node.js Tool Installer
# Finds or downloads and caches the specified version spec of Node.js and adds it to the PATH.
- task: NodeTool@0
  inputs:
    versionSpec: '17.x'
    #checkLatest: false # Optional

- script: npm install -g cspell@5.20.0
  displayName: 'Install cspell npm'

- script: cspell "docs/**/*.md"
  displayName: 'Spell Check md files'

- script: npm install -g markdownlint-cli@0.31.0
  displayName: "Install markdown linter"

- script: markdownlint "**/*.md"
  displayName: "Lint md files"

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.10'
    architecture: 'x64'

- script: python -m pip install --upgrade pip
  displayName: 'Install/Upgrade pip'

- script: python -m pip install --upgrade -r requirements.txt
  displayName: 'Install/upgrade dependencies'

- script: python Utf8Test.py --RootDir docs
  displayName: Check character encoding

- script: pytest -v --junitxml=test.junit.xml --html=pytest_report.html --self-contained-html --cov=. --cov-report html:cov_html --cov-report xml:cov.xml
  displayName: 'Run UnitTests'

# Publish Test Results to Azure Pipelines/TFS
- task: PublishTestResults@2
  displayName: 'Publish junit test results'
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
    testResultsFiles: 'test.junit.xml'
    mergeTestResults: true # Optional
    publishRunAttachments: true # Optional

# Publish Build Artifacts
# Publish build artifacts to Azure Pipelines/TFS or a file share
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'pytest_report.html'
    artifactName: 'python unit test report'
  continueOnError: true
  condition: succeededOrFailed()

# Publish Code Coverage Results
# Publish Cobertura code coverage results
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura' # Options: cobertura, jaCoCo
    summaryFileLocation: $(System.DefaultWorkingDirectory)/cov.xml
    reportDirectory: $(System.DefaultWorkingDirectory)/cov_html
  condition: succeededOrFailed()

- script: flake8 . > flake8.err.log
  displayName: 'Run flake8'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'flake8.err.log'
    artifactName: 'Flake8 Error log file'
  continueOnError: true
  condition: Failed()

# For CI build don't use remote repos
- script: python DocBuild.py --clean --build --OutputDir docs --yml mkdocs_base.yml -o pr-gate.log
  displayName: 'Run Preprocess'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Generated Yml File'
  inputs:
    PathtoPublish: 'mkdocs.yml'
    ArtifactName: 'mkdocs.yml'
  continueOnError: true
  condition: succeededOrFailed()

- task: CmdLine@1
  displayName: 'build'
  inputs:
    filename: mkdocs
    arguments: 'build -s -v '

- task: PublishBuildArtifacts@1
  displayName: 'Publish DocBuild Log'
  inputs:
    PathtoPublish: 'pr-gate.log'
    ArtifactName: 'DocBuild_Pr-Gate.log'
  continueOnError: true
  condition: failed()
